#Author: Daniel Castaneda Mogollon
#Sirimulla Research Lab
#05/04/2018

#This code has multiple goals. It extracts the score from smina and the ID related to a specific protein, 
#adds an ID to the corresponding protein, adds an experimental value for that protein-ligand, and adds necessary commands to
#launcher.

import os
import glob
import re
import pandas as pd


def extracting():
#Extracts the score from smina and the ID related to the protein
    path = '/Users/Danniel/Desktop/core_smina/'         #Change your path
    os.chdir(path)
    scores_list =[]
    id_list=[]
    all_files = glob.glob(path+'*.txt')                 #Extracts all the txt files from the path
    for item in all_files:
        with open(item) as f:
            content = f.readlines()
            for line in content:
                if line.startswith('1      '):          #Looks for the best pose given by smina
                    score = re.split('      ',line)
                    id = item[34:38]                    #Depends on your path
                    score = score[1]
                    score = score[1:]
                    scores_list.append(score)
                    id_list.append(id)

    #Adds the score to the corresponding ID in the csv file (vina, nnscore, dlscore)
    path2 = '/Users/Danniel/Desktop/core_dlscore'
    os.chdir(path2)
    file_out = open('all_all.csv','w')
    with open('all_core.csv') as f:
        content = f.readlines()
        for line in content:
            id2 = line[0:4]
            if id2 in id_list:
                index_num = (id_list.index(id2))
                line = line.rstrip('\n\r')
                line = line+','+scores_list[index_num]+'\n'
                file_out.write(line)

def experimental():
        id_list = []
        id_exp = []
        value_list = []
        os.chdir('/Users/Danniel/Desktop/core_dlscore')
        book = pd.read_csv("all_all.csv")
        path = ("/Users/Danniel/PycharmProjects/DL_Score")
        os.chdir(path)
        book_exp = pd.read_csv("experimental_pdb_binddata.csv")
        nrows = book.shape[0]
        nrows_exp = book_exp.shape[0]
        for i in range(0, nrows_exp, 1):
            id_exp.append(book_exp['pdbid'][i])  # Storing the ID's from the experimental file into a list
            value_list.append(book_exp['act'][i])  # Storing the values matching the ID's into the list
        for j in range(0, nrows, 1):
            id_list.append(book['PDB_ID'][j])
            if id_list[j] in id_exp:
                index_number = id_exp.index(id_list[j])
                book.at[j, 'Experimental'] = value_list[index_number]  # We add the experimental values to the dataframe
        book.to_csv("all_all.csv", sep=",")  # We write a new file with the edited dataframe

def removing_launcher():  #Removes commands from a launcher file
    path = '/Users/Danniel/Desktop/'
    os.chdir(path)
    commands_list=[] #Creates a list of the commands in the file
    current_files=[] #Creates a list that contains the current files, so we don't put this in the new commands of launcher
    new_commands=[] #Creates a launcher list of commands that does not have the obtained files.
    file_out = open('dlscore_commands2.sh','w')
    with open('dlscore_commands.sh') as f:
        content = f.readlines()
        for line in content:
            line = line.replace('\n','')
            commands_list.append(line)
    print(str(len(commands_list))+' is the number of files that is supposed to be generated by launcher')

    path2 = '/Users/Danniel/Desktop/csv_dlscore/' #This is the folder with the output from launcher
    os.chdir(path2)
    for item in os.listdir(path2):
        item=item[:-4]
        current_files.append(item)
    print(str(len(current_files))+' is the actual number of files')

    for item in commands_list:
        if item[-18:] in current_files:
            continue
        else:
            new_commands.append(item)
    print(str(len(new_commands))+' is the size of the list of the new commands')

    for i in range(len(new_commands)):
        file_out.write(new_commands[i]+'\n')

def main():
    #extracting()
    #adding_score()
    #experimental()
    removing_launcher()

main()
